TranslationUnitDecl 0x120848808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1208496f0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x120848dd0 '__int128'
|-TypedefDecl 0x120849760 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x120848df0 'unsigned __int128'
|-TypedefDecl 0x12100d120 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x12100ce90 '__NSConstantString_tag'
|   `-CXXRecord 0x12100ce00 '__NSConstantString_tag'
|-TypedefDecl 0x12100d188 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x120848fd0 '__SVInt8_t'
|-TypedefDecl 0x12100d1f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x120848ff0 '__SVInt16_t'
|-TypedefDecl 0x12100d258 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x120849010 '__SVInt32_t'
|-TypedefDecl 0x12100d2c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x120849030 '__SVInt64_t'
|-TypedefDecl 0x12100d328 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x120849050 '__SVUint8_t'
|-TypedefDecl 0x12100d390 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x120849070 '__SVUint16_t'
|-TypedefDecl 0x12100d3f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x120849090 '__SVUint32_t'
|-TypedefDecl 0x12100d460 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x1208490b0 '__SVUint64_t'
|-TypedefDecl 0x12100d4c8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x1208490d0 '__SVFloat16_t'
|-TypedefDecl 0x12100d530 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1208490f0 '__SVFloat32_t'
|-TypedefDecl 0x12100d598 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x120849110 '__SVFloat64_t'
|-TypedefDecl 0x12100d600 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x120849130 '__SVBFloat16_t'
|-TypedefDecl 0x12100d668 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x120849150 '__clang_svint8x2_t'
|-TypedefDecl 0x12100d6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x120849170 '__clang_svint16x2_t'
|-TypedefDecl 0x12100d738 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x120849190 '__clang_svint32x2_t'
|-TypedefDecl 0x12100d7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x1208491b0 '__clang_svint64x2_t'
|-TypedefDecl 0x12100d808 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x1208491d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x12100d870 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1208491f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12100d8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x120849210 '__clang_svuint32x2_t'
|-TypedefDecl 0x12100d940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x120849230 '__clang_svuint64x2_t'
|-TypedefDecl 0x12100d9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x120849250 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12100da10 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x120849270 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12100da78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x120849290 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12100dae0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x1208492b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12100db48 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x1208492d0 '__clang_svint8x3_t'
|-TypedefDecl 0x12100dbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1208492f0 '__clang_svint16x3_t'
|-TypedefDecl 0x12100dc18 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x120849310 '__clang_svint32x3_t'
|-TypedefDecl 0x12100dc80 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x120849330 '__clang_svint64x3_t'
|-TypedefDecl 0x12100dce8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x120849350 '__clang_svuint8x3_t'
|-TypedefDecl 0x12100dd50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x120849370 '__clang_svuint16x3_t'
|-TypedefDecl 0x121010600 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x120849390 '__clang_svuint32x3_t'
|-TypedefDecl 0x121010668 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x1208493b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x1210106d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x1208493d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x121010738 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1208493f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1210107a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x120849410 '__clang_svfloat64x3_t'
|-TypedefDecl 0x121010808 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x120849430 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x121010870 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x120849450 '__clang_svint8x4_t'
|-TypedefDecl 0x1210108d8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x120849470 '__clang_svint16x4_t'
|-TypedefDecl 0x121010940 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x120849490 '__clang_svint32x4_t'
|-TypedefDecl 0x1210109a8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x1208494b0 '__clang_svint64x4_t'
|-TypedefDecl 0x121010a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x1208494d0 '__clang_svuint8x4_t'
|-TypedefDecl 0x121010a78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1208494f0 '__clang_svuint16x4_t'
|-TypedefDecl 0x121010ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x120849510 '__clang_svuint32x4_t'
|-TypedefDecl 0x121010b48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x120849530 '__clang_svuint64x4_t'
|-TypedefDecl 0x121010bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x120849550 '__clang_svfloat16x4_t'
|-TypedefDecl 0x121010c18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x120849570 '__clang_svfloat32x4_t'
|-TypedefDecl 0x121010c80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x120849590 '__clang_svfloat64x4_t'
|-TypedefDecl 0x121010ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x1208495b0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x121010d50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x1208495d0 '__SVBool_t'
|-TypedefDecl 0x121010db8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1208495f0 '__clang_svboolx2_t'
|-TypedefDecl 0x121010e20 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x120849610 '__clang_svboolx4_t'
|-TypedefDecl 0x121010e88 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x120849630 '__SVCount_t'
|-TypedefDecl 0x121010f28 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x121010ee0 'char *'
|   `-BuiltinType 0x1208488b0 'char'
|-TypedefDecl 0x121010f98 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x121010ee0 'char *'
|   `-BuiltinType 0x1208488b0 'char'
|-CXXRecordDecl 0x121010ff0 <./tests/playground/simpleCppClasses/inheritanceChain/file.cpp:1:1, line:8:1> line:1:7 referenced class TestGrandParentClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-CXXRecordDecl 0x121011108 <col:1, col:7> col:7 implicit class TestGrandParentClass
| |-AccessSpecDecl 0x121011198 <line:3:3, col:9> col:3 public
| |-CXXMethodDecl 0x121011360 <line:4:5, line:7:5> line:4:17 used add 'int (int, int)' virtual implicit-inline
| | |-ParmVarDecl 0x1210111d8 <col:21, col:25> col:25 used val1 'int'
| | |-ParmVarDecl 0x121011258 <col:31, col:35> col:35 used val2 'int'
| | `-CompoundStmt 0x1210303e0 <line:5:5, line:7:5>
| |   `-ReturnStmt 0x1210303d0 <line:6:9, col:23>
| |     `-BinaryOperator 0x1210303b0 <col:16, col:23> 'int' '+'
| |       |-ImplicitCastExpr 0x121030380 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x121030340 <col:16> 'int' lvalue ParmVar 0x1210111d8 'val1' 'int'
| |       `-ImplicitCastExpr 0x121030398 <col:23> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x121030360 <col:23> 'int' lvalue ParmVar 0x121011258 'val2' 'int'
| |-CXXMethodDecl 0x121011490 <line:1:7> col:7 implicit constexpr operator= 'TestGrandParentClass &(const TestGrandParentClass &)' inline default noexcept-unevaluated 0x121011490
| | `-ParmVarDecl 0x121030000 <col:7> col:7 'const TestGrandParentClass &'
| |-CXXMethodDecl 0x121030098 <col:7> col:7 implicit constexpr operator= 'TestGrandParentClass &(TestGrandParentClass &&)' inline default noexcept-unevaluated 0x121030098
| | `-ParmVarDecl 0x1210301a8 <col:7> col:7 'TestGrandParentClass &&'
| |-CXXDestructorDecl 0x121030228 <col:7> col:7 implicit constexpr ~TestGrandParentClass 'void ()' inline default trivial noexcept-unevaluated 0x121030228
| |-CXXConstructorDecl 0x1210359f8 <col:7> col:7 implicit used constexpr TestGrandParentClass 'void () noexcept' inline default
| | `-CompoundStmt 0x121036620 <col:7>
| |-CXXConstructorDecl 0x121035ae0 <col:7> col:7 implicit constexpr TestGrandParentClass 'void (const TestGrandParentClass &)' inline default noexcept-unevaluated 0x121035ae0
| | `-ParmVarDecl 0x121035bf8 <col:7> col:7 'const TestGrandParentClass &'
| `-CXXConstructorDecl 0x121035c78 <col:7> col:7 implicit constexpr TestGrandParentClass 'void (TestGrandParentClass &&)' inline default noexcept-unevaluated 0x121035c78
|   `-ParmVarDecl 0x121035d98 <col:7> col:7 'TestGrandParentClass &&'
|-CXXRecordDecl 0x1210303f8 <line:10:1, line:17:1> line:10:7 referenced class TestParentClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-public 'TestGrandParentClass':'TestGrandParentClass'
| |-CXXRecordDecl 0x121030590 <col:1, col:7> col:7 implicit class TestParentClass
| |-AccessSpecDecl 0x121030620 <line:12:3, col:9> col:3 public
| |-CXXMethodDecl 0x1210307b8 <line:13:5, line:16:5> line:13:9 used add 'int (int, int)' implicit-inline
| | |-Overrides: [ 0x121011360 TestGrandParentClass::add 'int (int, int)' ]
| | |-ParmVarDecl 0x121030660 <col:13, col:17> col:17 used val1 'int'
| | |-ParmVarDecl 0x1210306e0 <col:23, col:27> col:27 used val2 'int'
| | |-CompoundStmt 0x121030fa8 <line:14:5, line:16:5>
| | | `-ReturnStmt 0x121030f98 <line:15:9, col:52>
| | |   `-CXXMemberCallExpr 0x121030e58 <col:16, col:52> 'int'
| | |     |-MemberExpr 0x121030dd0 <col:16, col:38> '<bound member function type>' ->add 0x121011360
| | |     | `-ImplicitCastExpr 0x121030e88 <col:38> 'TestGrandParentClass *' <UncheckedDerivedToBase (TestGrandParentClass)>
| | |     |   `-CXXThisExpr 0x121030dc0 <col:38> 'TestParentClass *' implicit this
| | |     |-ImplicitCastExpr 0x121030ea8 <col:42> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x121030e18 <col:42> 'int' lvalue ParmVar 0x121030660 'val1' 'int'
| | |     `-ImplicitCastExpr 0x121030ec0 <col:48> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x121030e38 <col:48> 'int' lvalue ParmVar 0x1210306e0 'val2' 'int'
| | `-OverrideAttr 0x121030870 <line:13:33>
| |-CXXMethodDecl 0x121030940 <line:10:7> col:7 implicit constexpr operator= 'TestParentClass &(const TestParentClass &)' inline default noexcept-unevaluated 0x121030940
| | `-ParmVarDecl 0x121030a58 <col:7> col:7 'const TestParentClass &'
| |-CXXMethodDecl 0x121030af8 <col:7> col:7 implicit constexpr operator= 'TestParentClass &(TestParentClass &&)' inline default noexcept-unevaluated 0x121030af8
| | `-ParmVarDecl 0x121030c08 <col:7> col:7 'TestParentClass &&'
| |-CXXDestructorDecl 0x121030c88 <col:7> col:7 implicit constexpr ~TestParentClass 'void ()' inline default trivial noexcept-unevaluated 0x121030c88
| |-CXXConstructorDecl 0x1210358f8 <col:7> col:7 implicit used constexpr TestParentClass 'void () noexcept' inline default
| | |-CXXCtorInitializer 'TestGrandParentClass':'TestGrandParentClass'
| | | `-CXXConstructExpr 0x121036630 <col:7> 'TestGrandParentClass':'TestGrandParentClass' 'void () noexcept'
| | `-CompoundStmt 0x121036690 <col:7>
| |-CXXConstructorDecl 0x121035e18 <col:7> col:7 implicit constexpr TestParentClass 'void (const TestParentClass &)' inline default noexcept-unevaluated 0x121035e18
| | `-ParmVarDecl 0x121035f38 <col:7> col:7 'const TestParentClass &'
| `-CXXConstructorDecl 0x121035fb8 <col:7> col:7 implicit constexpr TestParentClass 'void (TestParentClass &&)' inline default noexcept-unevaluated 0x121035fb8
|   `-ParmVarDecl 0x1210360d8 <col:7> col:7 'TestParentClass &&'
|-CXXRecordDecl 0x121034400 <line:19:1, line:26:1> line:19:7 referenced class TestClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-public 'TestParentClass':'TestParentClass'
| |-CXXRecordDecl 0x121034590 <col:1, col:7> col:7 implicit class TestClass
| |-AccessSpecDecl 0x121034620 <line:21:3, col:9> col:3 public
| |-CXXMethodDecl 0x1210347b8 <line:22:5, line:25:5> line:22:9 used add 'int (int, int)' implicit-inline
| | |-Overrides: [ 0x1210307b8 TestParentClass::add 'int (int, int)' ]
| | |-ParmVarDecl 0x121034660 <col:13, col:17> col:17 used val1 'int'
| | |-ParmVarDecl 0x1210346e0 <col:23, col:27> col:27 used val2 'int'
| | |-CompoundStmt 0x121034fa8 <line:23:5, line:25:5>
| | | `-ReturnStmt 0x121034f98 <line:24:9, col:47>
| | |   `-CXXMemberCallExpr 0x121034e58 <col:16, col:47> 'int'
| | |     |-MemberExpr 0x121034dd0 <col:16, col:33> '<bound member function type>' ->add 0x1210307b8
| | |     | `-ImplicitCastExpr 0x121034e88 <col:33> 'TestParentClass *' <UncheckedDerivedToBase (TestParentClass)>
| | |     |   `-CXXThisExpr 0x121034dc0 <col:33> 'TestClass *' implicit this
| | |     |-ImplicitCastExpr 0x121034ea8 <col:37> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x121034e18 <col:37> 'int' lvalue ParmVar 0x121034660 'val1' 'int'
| | |     `-ImplicitCastExpr 0x121034ec0 <col:43> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x121034e38 <col:43> 'int' lvalue ParmVar 0x1210346e0 'val2' 'int'
| | `-OverrideAttr 0x121034870 <line:22:33>
| |-CXXMethodDecl 0x121034940 <line:19:7> col:7 implicit constexpr operator= 'TestClass &(const TestClass &)' inline default noexcept-unevaluated 0x121034940
| | `-ParmVarDecl 0x121034a58 <col:7> col:7 'const TestClass &'
| |-CXXMethodDecl 0x121034af8 <col:7> col:7 implicit constexpr operator= 'TestClass &(TestClass &&)' inline default noexcept-unevaluated 0x121034af8
| | `-ParmVarDecl 0x121034c08 <col:7> col:7 'TestClass &&'
| |-CXXDestructorDecl 0x121034c88 <col:7> col:7 implicit constexpr ~TestClass 'void ()' inline default trivial noexcept-unevaluated 0x121034c88
| |-CXXConstructorDecl 0x121035800 <col:7> col:7 implicit used constexpr TestClass 'void () noexcept' inline default
| | |-CXXCtorInitializer 'TestParentClass':'TestParentClass'
| | | `-CXXConstructExpr 0x1210366a0 <col:7> 'TestParentClass':'TestParentClass' 'void () noexcept'
| | `-CompoundStmt 0x121036700 <col:7>
| |-CXXConstructorDecl 0x121036158 <col:7> col:7 implicit constexpr TestClass 'void (const TestClass &)' inline default noexcept-unevaluated 0x121036158
| | `-ParmVarDecl 0x121036278 <col:7> col:7 'const TestClass &'
| `-CXXConstructorDecl 0x1210362f8 <col:7> col:7 implicit constexpr TestClass 'void (TestClass &&)' inline default noexcept-unevaluated 0x1210362f8
|   `-ParmVarDecl 0x121036418 <col:7> col:7 'TestClass &&'
`-FunctionDecl 0x121035220 <line:28:1, line:32:1> line:28:5 main 'int (int, char **)'
  |-ParmVarDecl 0x121034fd8 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x121035100 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x121038e40 <line:29:1, line:32:1>
    |-DeclStmt 0x121036738 <line:30:5, col:24>
    | `-VarDecl 0x121035360 <col:5, col:15> col:15 used testClass 'TestClass':'TestClass' callinit
    |   `-CXXConstructExpr 0x121036710 <col:15> 'TestClass':'TestClass' 'void () noexcept'
    `-ReturnStmt 0x121038e30 <line:31:5, col:30>
      `-CXXMemberCallExpr 0x121038e00 <col:12, col:30> 'int'
        |-MemberExpr 0x121036770 <col:12, col:22> '<bound member function type>' .add 0x1210347b8
        | `-DeclRefExpr 0x121036750 <col:12> 'TestClass':'TestClass' lvalue Var 0x121035360 'testClass' 'TestClass':'TestClass'
        |-IntegerLiteral 0x1210367a0 <col:26> 'int' 1
        `-IntegerLiteral 0x1210367c0 <col:29> 'int' 2
