TranslationUnitDecl 0x144825c08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x144826af0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1448261d0 '__int128'
|-TypedefDecl 0x144826b60 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1448261f0 'unsigned __int128'
|-TypedefDecl 0x14480e520 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x14480e290 '__NSConstantString_tag'
|   `-CXXRecord 0x14480e200 '__NSConstantString_tag'
|-TypedefDecl 0x14480e588 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x1448263d0 '__SVInt8_t'
|-TypedefDecl 0x14480e5f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1448263f0 '__SVInt16_t'
|-TypedefDecl 0x14480e658 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x144826410 '__SVInt32_t'
|-TypedefDecl 0x14480e6c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x144826430 '__SVInt64_t'
|-TypedefDecl 0x14480e728 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x144826450 '__SVUint8_t'
|-TypedefDecl 0x14480e790 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x144826470 '__SVUint16_t'
|-TypedefDecl 0x14480e7f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x144826490 '__SVUint32_t'
|-TypedefDecl 0x14480e860 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x1448264b0 '__SVUint64_t'
|-TypedefDecl 0x14480e8c8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x1448264d0 '__SVFloat16_t'
|-TypedefDecl 0x14480e930 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1448264f0 '__SVFloat32_t'
|-TypedefDecl 0x14480e998 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x144826510 '__SVFloat64_t'
|-TypedefDecl 0x14480ea00 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x144826530 '__SVBFloat16_t'
|-TypedefDecl 0x14480ea68 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x144826550 '__clang_svint8x2_t'
|-TypedefDecl 0x14480ead0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x144826570 '__clang_svint16x2_t'
|-TypedefDecl 0x14480eb38 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x144826590 '__clang_svint32x2_t'
|-TypedefDecl 0x14480eba0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x1448265b0 '__clang_svint64x2_t'
|-TypedefDecl 0x14480ec08 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x1448265d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x14480ec70 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1448265f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x14480ecd8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x144826610 '__clang_svuint32x2_t'
|-TypedefDecl 0x14480ed40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x144826630 '__clang_svuint64x2_t'
|-TypedefDecl 0x14480eda8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x144826650 '__clang_svfloat16x2_t'
|-TypedefDecl 0x14480ee10 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x144826670 '__clang_svfloat32x2_t'
|-TypedefDecl 0x14480ee78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x144826690 '__clang_svfloat64x2_t'
|-TypedefDecl 0x14480eee0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x1448266b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x14480ef48 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x1448266d0 '__clang_svint8x3_t'
|-TypedefDecl 0x14480efb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1448266f0 '__clang_svint16x3_t'
|-TypedefDecl 0x14480f018 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x144826710 '__clang_svint32x3_t'
|-TypedefDecl 0x14480f080 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x144826730 '__clang_svint64x3_t'
|-TypedefDecl 0x14480f0e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x144826750 '__clang_svuint8x3_t'
|-TypedefDecl 0x14480f150 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x144826770 '__clang_svuint16x3_t'
|-TypedefDecl 0x1448e1600 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x144826790 '__clang_svuint32x3_t'
|-TypedefDecl 0x1448e1668 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x1448267b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x1448e16d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x1448267d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x1448e1738 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1448267f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1448e17a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x144826810 '__clang_svfloat64x3_t'
|-TypedefDecl 0x1448e1808 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x144826830 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x1448e1870 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x144826850 '__clang_svint8x4_t'
|-TypedefDecl 0x1448e18d8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x144826870 '__clang_svint16x4_t'
|-TypedefDecl 0x1448e1940 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x144826890 '__clang_svint32x4_t'
|-TypedefDecl 0x1448e19a8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x1448268b0 '__clang_svint64x4_t'
|-TypedefDecl 0x1448e1a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x1448268d0 '__clang_svuint8x4_t'
|-TypedefDecl 0x1448e1a78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1448268f0 '__clang_svuint16x4_t'
|-TypedefDecl 0x1448e1ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x144826910 '__clang_svuint32x4_t'
|-TypedefDecl 0x1448e1b48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x144826930 '__clang_svuint64x4_t'
|-TypedefDecl 0x1448e1bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x144826950 '__clang_svfloat16x4_t'
|-TypedefDecl 0x1448e1c18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x144826970 '__clang_svfloat32x4_t'
|-TypedefDecl 0x1448e1c80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x144826990 '__clang_svfloat64x4_t'
|-TypedefDecl 0x1448e1ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x1448269b0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x1448e1d50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x1448269d0 '__SVBool_t'
|-TypedefDecl 0x1448e1db8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1448269f0 '__clang_svboolx2_t'
|-TypedefDecl 0x1448e1e20 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x144826a10 '__clang_svboolx4_t'
|-TypedefDecl 0x1448e1e88 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x144826a30 '__SVCount_t'
|-TypedefDecl 0x1448e1f28 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1448e1ee0 'char *'
|   `-BuiltinType 0x144825cb0 'char'
|-TypedefDecl 0x1448e1f98 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1448e1ee0 'char *'
|   `-BuiltinType 0x144825cb0 'char'
|-CXXRecordDecl 0x1448e1ff0 <./tests/playground/simpleCppClasses/twoParentClasses/file.cpp:1:1, line:8:1> line:1:7 referenced class TestBaseClass1 definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-CXXRecordDecl 0x1448e2108 <col:1, col:7> col:7 implicit class TestBaseClass1
| |-AccessSpecDecl 0x1448e2198 <line:3:3, col:9> col:3 public
| |-CXXMethodDecl 0x1448e2360 <line:4:5, line:7:5> line:4:17 used add 'int (int, int)' virtual implicit-inline
| | |-ParmVarDecl 0x1448e21d8 <col:21, col:25> col:25 used val1 'int'
| | |-ParmVarDecl 0x1448e2258 <col:31, col:35> col:35 used val2 'int'
| | `-CompoundStmt 0x144900be0 <line:5:5, line:7:5>
| |   `-ReturnStmt 0x144900bd0 <line:6:9, col:23>
| |     `-BinaryOperator 0x144900bb0 <col:16, col:23> 'int' '+'
| |       |-ImplicitCastExpr 0x144900b80 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x144900b40 <col:16> 'int' lvalue ParmVar 0x1448e21d8 'val1' 'int'
| |       `-ImplicitCastExpr 0x144900b98 <col:23> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x144900b60 <col:23> 'int' lvalue ParmVar 0x1448e2258 'val2' 'int'
| |-CXXMethodDecl 0x1448e2490 <line:1:7> col:7 implicit constexpr operator= 'TestBaseClass1 &(const TestBaseClass1 &)' inline default noexcept-unevaluated 0x1448e2490
| | `-ParmVarDecl 0x144900800 <col:7> col:7 'const TestBaseClass1 &'
| |-CXXMethodDecl 0x144900898 <col:7> col:7 implicit constexpr operator= 'TestBaseClass1 &(TestBaseClass1 &&)' inline default noexcept-unevaluated 0x144900898
| | `-ParmVarDecl 0x1449009a8 <col:7> col:7 'TestBaseClass1 &&'
| |-CXXDestructorDecl 0x144900a28 <col:7> col:7 implicit constexpr ~TestBaseClass1 'void ()' inline default trivial noexcept-unevaluated 0x144900a28
| |-CXXConstructorDecl 0x144905f68 <col:7> col:7 implicit used constexpr TestBaseClass1 'void () noexcept' inline default
| | `-CompoundStmt 0x144908860 <col:7>
| |-CXXConstructorDecl 0x144906150 <col:7> col:7 implicit constexpr TestBaseClass1 'void (const TestBaseClass1 &)' inline default noexcept-unevaluated 0x144906150
| | `-ParmVarDecl 0x144906268 <col:7> col:7 'const TestBaseClass1 &'
| `-CXXConstructorDecl 0x1449062e8 <col:7> col:7 implicit constexpr TestBaseClass1 'void (TestBaseClass1 &&)' inline default noexcept-unevaluated 0x1449062e8
|   `-ParmVarDecl 0x144906408 <col:7> col:7 'TestBaseClass1 &&'
|-CXXRecordDecl 0x144900bf8 <line:10:1, line:17:1> line:10:7 referenced class TestBaseClass2 definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-CXXRecordDecl 0x144900d18 <col:1, col:7> col:7 implicit class TestBaseClass2
| |-AccessSpecDecl 0x144900da8 <line:12:3, col:9> col:3 public
| |-CXXMethodDecl 0x144900f38 <line:13:5, line:16:5> line:13:17 used sub 'int (int, int)' virtual implicit-inline
| | |-ParmVarDecl 0x144900de8 <col:21, col:25> col:25 used val1 'int'
| | |-ParmVarDecl 0x144900e68 <col:31, col:35> col:35 used val2 'int'
| | `-CompoundStmt 0x144901530 <line:14:5, line:16:5>
| |   `-ReturnStmt 0x144901520 <line:15:9, col:23>
| |     `-BinaryOperator 0x144901500 <col:16, col:23> 'int' '+'
| |       |-ImplicitCastExpr 0x1449014d0 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x144901490 <col:16> 'int' lvalue ParmVar 0x144900de8 'val1' 'int'
| |       `-ImplicitCastExpr 0x1449014e8 <col:23> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1449014b0 <col:23> 'int' lvalue ParmVar 0x144900e68 'val2' 'int'
| |-CXXMethodDecl 0x144901060 <line:10:7> col:7 implicit constexpr operator= 'TestBaseClass2 &(const TestBaseClass2 &)' inline default noexcept-unevaluated 0x144901060
| | `-ParmVarDecl 0x144901178 <col:7> col:7 'const TestBaseClass2 &'
| |-CXXMethodDecl 0x144901218 <col:7> col:7 implicit constexpr operator= 'TestBaseClass2 &(TestBaseClass2 &&)' inline default noexcept-unevaluated 0x144901218
| | `-ParmVarDecl 0x144901328 <col:7> col:7 'TestBaseClass2 &&'
| |-CXXDestructorDecl 0x1449013a8 <col:7> col:7 implicit constexpr ~TestBaseClass2 'void ()' inline default trivial noexcept-unevaluated 0x1449013a8
| |-CXXConstructorDecl 0x144906068 <col:7> col:7 implicit used constexpr TestBaseClass2 'void () noexcept' inline default
| | `-CompoundStmt 0x144908900 <col:7>
| |-CXXConstructorDecl 0x144906488 <col:7> col:7 implicit constexpr TestBaseClass2 'void (const TestBaseClass2 &)' inline default noexcept-unevaluated 0x144906488
| | `-ParmVarDecl 0x1449065a8 <col:7> col:7 'const TestBaseClass2 &'
| `-CXXConstructorDecl 0x144906628 <col:7> col:7 implicit constexpr TestBaseClass2 'void (TestBaseClass2 &&)' inline default noexcept-unevaluated 0x144906628
|   `-ParmVarDecl 0x144906748 <col:7> col:7 'TestBaseClass2 &&'
|-CXXRecordDecl 0x144901548 <line:19:1, line:31:1> line:19:7 referenced class TestClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-public 'TestBaseClass1':'TestBaseClass1'
| |-public 'TestBaseClass2':'TestBaseClass2'
| |-CXXRecordDecl 0x144901758 <col:1, col:7> col:7 implicit class TestClass
| |-AccessSpecDecl 0x144903a00 <line:21:3, col:9> col:3 public
| |-CXXMethodDecl 0x144903b98 <line:22:5, line:25:5> line:22:9 used add 'int (int, int)' implicit-inline
| | |-Overrides: [ 0x1448e2360 TestBaseClass1::add 'int (int, int)' ]
| | |-ParmVarDecl 0x144903a40 <col:13, col:17> col:17 used val1 'int'
| | |-ParmVarDecl 0x144903ac0 <col:23, col:27> col:27 used val2 'int'
| | |-CompoundStmt 0x1449045c8 <line:23:5, line:25:5>
| | | `-ReturnStmt 0x1449045b8 <line:24:9, col:46>
| | |   `-CXXMemberCallExpr 0x144904478 <col:16, col:46> 'int'
| | |     |-MemberExpr 0x1449043f0 <col:16, col:32> '<bound member function type>' ->add 0x1448e2360
| | |     | `-ImplicitCastExpr 0x1449044a8 <col:32> 'TestBaseClass1 *' <UncheckedDerivedToBase (TestBaseClass1)>
| | |     |   `-CXXThisExpr 0x1449043e0 <col:32> 'TestClass *' implicit this
| | |     |-ImplicitCastExpr 0x1449044c8 <col:36> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x144904438 <col:36> 'int' lvalue ParmVar 0x144903a40 'val1' 'int'
| | |     `-ImplicitCastExpr 0x1449044e0 <col:42> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x144904458 <col:42> 'int' lvalue ParmVar 0x144903ac0 'val2' 'int'
| | `-OverrideAttr 0x144903c50 <line:22:33>
| |-CXXMethodDecl 0x144903de0 <line:27:5, line:30:5> line:27:9 used sub 'int (int, int)' implicit-inline
| | |-Overrides: [ 0x144900f38 TestBaseClass2::sub 'int (int, int)' ]
| | |-ParmVarDecl 0x144903cc0 <col:13, col:17> col:17 used val1 'int'
| | |-ParmVarDecl 0x144903d40 <col:23, col:27> col:27 used val2 'int'
| | |-CompoundStmt 0x144904818 <line:28:5, line:30:5>
| | | `-ReturnStmt 0x144904808 <line:29:9, col:46>
| | |   `-CXXMemberCallExpr 0x1449046c8 <col:16, col:46> 'int'
| | |     |-MemberExpr 0x144904640 <col:16, col:32> '<bound member function type>' ->sub 0x144900f38
| | |     | `-ImplicitCastExpr 0x1449046f8 <col:32> 'TestBaseClass2 *' <UncheckedDerivedToBase (TestBaseClass2)>
| | |     |   `-CXXThisExpr 0x144904630 <col:32> 'TestClass *' implicit this
| | |     |-ImplicitCastExpr 0x144904718 <col:36> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x144904688 <col:36> 'int' lvalue ParmVar 0x144903cc0 'val1' 'int'
| | |     `-ImplicitCastExpr 0x144904730 <col:42> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x1449046a8 <col:42> 'int' lvalue ParmVar 0x144903d40 'val2' 'int'
| | `-OverrideAttr 0x144903e98 <line:27:33>
| |-CXXMethodDecl 0x144903f60 <line:19:7> col:7 implicit constexpr operator= 'TestClass &(const TestClass &)' inline default noexcept-unevaluated 0x144903f60
| | `-ParmVarDecl 0x144904078 <col:7> col:7 'const TestClass &'
| |-CXXMethodDecl 0x144904118 <col:7> col:7 implicit constexpr operator= 'TestClass &(TestClass &&)' inline default noexcept-unevaluated 0x144904118
| | `-ParmVarDecl 0x144904228 <col:7> col:7 'TestClass &&'
| |-CXXDestructorDecl 0x1449042a8 <col:7> col:7 implicit constexpr ~TestClass 'void ()' inline default trivial noexcept-unevaluated 0x1449042a8
| |-CXXConstructorDecl 0x144905e70 <col:7> col:7 implicit used constexpr TestClass 'void () noexcept' inline default
| | |-CXXCtorInitializer 'TestBaseClass1':'TestBaseClass1'
| | | `-CXXConstructExpr 0x144908870 <col:7> 'TestBaseClass1':'TestBaseClass1' 'void () noexcept'
| | |-CXXCtorInitializer 'TestBaseClass2':'TestBaseClass2'
| | | `-CXXConstructExpr 0x144908910 <col:7> 'TestBaseClass2':'TestBaseClass2' 'void () noexcept'
| | `-CompoundStmt 0x144908978 <col:7>
| |-CXXConstructorDecl 0x1449067c8 <col:7> col:7 implicit constexpr TestClass 'void (const TestClass &)' inline default noexcept-unevaluated 0x1449067c8
| | `-ParmVarDecl 0x1449068e8 <col:7> col:7 'const TestClass &'
| `-CXXConstructorDecl 0x144906968 <col:7> col:7 implicit constexpr TestClass 'void (TestClass &&)' inline default noexcept-unevaluated 0x144906968
|   `-ParmVarDecl 0x144906a88 <col:7> col:7 'TestClass &&'
`-FunctionDecl 0x144905cb0 <line:33:1, line:37:1> line:33:5 main 'int (int, char **)'
  |-ParmVarDecl 0x144904848 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x144904970 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x144908ba8 <line:34:1, line:37:1>
    |-DeclStmt 0x1449089b0 <line:35:5, col:24>
    | `-VarDecl 0x144905df0 <col:5, col:15> col:15 used testClass 'TestClass':'TestClass' callinit
    |   `-CXXConstructExpr 0x144908988 <col:15> 'TestClass':'TestClass' 'void () noexcept'
    `-ReturnStmt 0x144908b98 <line:36:5, col:52>
      `-BinaryOperator 0x144908b48 <col:12, col:52> 'int' '+'
        |-CXXMemberCallExpr 0x144908a58 <col:12, col:30> 'int'
        | |-MemberExpr 0x1449089e8 <col:12, col:22> '<bound member function type>' .add 0x144903b98
        | | `-DeclRefExpr 0x1449089c8 <col:12> 'TestClass':'TestClass' lvalue Var 0x144905df0 'testClass' 'TestClass':'TestClass'
        | |-IntegerLiteral 0x144908a18 <col:26> 'int' 1
        | `-IntegerLiteral 0x144908a38 <col:29> 'int' 2
        `-CXXMemberCallExpr 0x144908b18 <col:34, col:52> 'int'
          |-MemberExpr 0x144908aa8 <col:34, col:44> '<bound member function type>' .sub 0x144903de0
          | `-DeclRefExpr 0x144908a88 <col:34> 'TestClass':'TestClass' lvalue Var 0x144905df0 'testClass' 'TestClass':'TestClass'
          |-IntegerLiteral 0x144908ad8 <col:48> 'int' 1
          `-IntegerLiteral 0x144908af8 <col:51> 'int' 2
