TranslationUnitDecl 0x128048e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x128049cf0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1280493d0 '__int128'
|-TypedefDecl 0x128049d60 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1280493f0 'unsigned __int128'
|-TypedefDecl 0x128032720 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x128032490 '__NSConstantString_tag'
|   `-CXXRecord 0x128032400 '__NSConstantString_tag'
|-TypedefDecl 0x128032788 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x1280495d0 '__SVInt8_t'
|-TypedefDecl 0x1280327f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x1280495f0 '__SVInt16_t'
|-TypedefDecl 0x128032858 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x128049610 '__SVInt32_t'
|-TypedefDecl 0x1280328c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x128049630 '__SVInt64_t'
|-TypedefDecl 0x128032928 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x128049650 '__SVUint8_t'
|-TypedefDecl 0x128032990 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x128049670 '__SVUint16_t'
|-TypedefDecl 0x1280329f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x128049690 '__SVUint32_t'
|-TypedefDecl 0x128032a60 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x1280496b0 '__SVUint64_t'
|-TypedefDecl 0x128032ac8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x1280496d0 '__SVFloat16_t'
|-TypedefDecl 0x128032b30 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1280496f0 '__SVFloat32_t'
|-TypedefDecl 0x128032b98 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x128049710 '__SVFloat64_t'
|-TypedefDecl 0x128032c00 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x128049730 '__SVBFloat16_t'
|-TypedefDecl 0x128032c68 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x128049750 '__clang_svint8x2_t'
|-TypedefDecl 0x128032cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x128049770 '__clang_svint16x2_t'
|-TypedefDecl 0x128032d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x128049790 '__clang_svint32x2_t'
|-TypedefDecl 0x128032da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x1280497b0 '__clang_svint64x2_t'
|-TypedefDecl 0x128032e08 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x1280497d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x128032e70 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1280497f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x128032ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x128049810 '__clang_svuint32x2_t'
|-TypedefDecl 0x128032f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x128049830 '__clang_svuint64x2_t'
|-TypedefDecl 0x128032fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x128049850 '__clang_svfloat16x2_t'
|-TypedefDecl 0x128033010 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x128049870 '__clang_svfloat32x2_t'
|-TypedefDecl 0x128033078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x128049890 '__clang_svfloat64x2_t'
|-TypedefDecl 0x1280330e0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x1280498b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x128033148 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x1280498d0 '__clang_svint8x3_t'
|-TypedefDecl 0x1280331b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1280498f0 '__clang_svint16x3_t'
|-TypedefDecl 0x128033218 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x128049910 '__clang_svint32x3_t'
|-TypedefDecl 0x128033280 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x128049930 '__clang_svint64x3_t'
|-TypedefDecl 0x1280332e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x128049950 '__clang_svuint8x3_t'
|-TypedefDecl 0x128033350 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x128049970 '__clang_svuint16x3_t'
|-TypedefDecl 0x128104800 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x128049990 '__clang_svuint32x3_t'
|-TypedefDecl 0x128104868 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x1280499b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x1281048d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x1280499d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x128104938 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1280499f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1281049a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x128049a10 '__clang_svfloat64x3_t'
|-TypedefDecl 0x128104a08 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x128049a30 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x128104a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x128049a50 '__clang_svint8x4_t'
|-TypedefDecl 0x128104ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x128049a70 '__clang_svint16x4_t'
|-TypedefDecl 0x128104b40 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x128049a90 '__clang_svint32x4_t'
|-TypedefDecl 0x128104ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x128049ab0 '__clang_svint64x4_t'
|-TypedefDecl 0x128104c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x128049ad0 '__clang_svuint8x4_t'
|-TypedefDecl 0x128104c78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x128049af0 '__clang_svuint16x4_t'
|-TypedefDecl 0x128104ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x128049b10 '__clang_svuint32x4_t'
|-TypedefDecl 0x128104d48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x128049b30 '__clang_svuint64x4_t'
|-TypedefDecl 0x128104db0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x128049b50 '__clang_svfloat16x4_t'
|-TypedefDecl 0x128104e18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x128049b70 '__clang_svfloat32x4_t'
|-TypedefDecl 0x128104e80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x128049b90 '__clang_svfloat64x4_t'
|-TypedefDecl 0x128104ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x128049bb0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x128104f50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x128049bd0 '__SVBool_t'
|-TypedefDecl 0x128104fb8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x128049bf0 '__clang_svboolx2_t'
|-TypedefDecl 0x128105020 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x128049c10 '__clang_svboolx4_t'
|-TypedefDecl 0x128105088 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x128049c30 '__SVCount_t'
|-TypedefDecl 0x128105128 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1281050e0 'char *'
|   `-BuiltinType 0x128048eb0 'char'
|-TypedefDecl 0x128105198 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x1281050e0 'char *'
|   `-BuiltinType 0x128048eb0 'char'
|-FunctionDecl 0x128105360 <./tests/playground/c_style_tests/funcs_with_headers/file.h:3:1, col:28> col:5 mult 'int (int, int)'
| |-ParmVarDecl 0x128105208 <col:10, col:14> col:14 val1 'int'
| `-ParmVarDecl 0x128105288 <col:20, col:24> col:24 val2 'int'
|-FunctionDecl 0x128105598 <line:5:1, line:8:1> line:5:5 divide 'int (int, int)'
| |-ParmVarDecl 0x128105478 <col:12, col:16> col:16 used val1 'int'
| |-ParmVarDecl 0x1281054f8 <col:22, col:26> col:26 used val2 'int'
| `-CompoundStmt 0x1281056f0 <line:6:1, line:8:1>
|   `-ReturnStmt 0x1281056e0 <line:7:5, col:19>
|     `-BinaryOperator 0x1281056c0 <col:12, col:19> 'int' '/'
|       |-ImplicitCastExpr 0x128105690 <col:12> 'int' <LValueToRValue>
|       | `-DeclRefExpr 0x128105650 <col:12> 'int' lvalue ParmVar 0x128105478 'val1' 'int'
|       `-ImplicitCastExpr 0x1281056a8 <col:19> 'int' <LValueToRValue>
|         `-DeclRefExpr 0x128105670 <col:19> 'int' lvalue ParmVar 0x1281054f8 'val2' 'int'
|-NamespaceDecl 0x128105708 <line:10:1, line:15:1> line:10:11 foo
| `-FunctionDecl 0x1200098b8 <line:13:1, col:27> col:5 used add 'int (int, int)'
|   |-ParmVarDecl 0x128105790 <col:9, col:13> col:13 val1 'int'
|   `-ParmVarDecl 0x120009818 <col:19, col:23> col:23 val2 'int'
|-FunctionDecl 0x120009aa8 prev 0x128105360 <./tests/playground/c_style_tests/funcs_with_headers/file.cpp:3:1, line:11:1> line:3:5 mult 'int (int, int)'
| |-ParmVarDecl 0x120009988 <col:10, col:14> col:14 used val1 'int'
| |-ParmVarDecl 0x120009a08 <col:20, col:24> col:24 used val2 'int'
| `-CompoundStmt 0x12000a130 <line:4:1, line:11:1>
|   |-DeclStmt 0x120009d70 <line:5:5, col:20>
|   | `-VarDecl 0x120009bd0 <col:5, col:19> col:10 used result 'int':'int' cinit
|   |   `-IntegerLiteral 0x120009c38 <col:19> 'int' 0
|   |-ForStmt 0x12000a0b0 <line:6:5, line:9:5>
|   | |-DeclStmt 0x120009e28 <line:6:10, col:19>
|   | | `-VarDecl 0x120009da0 <col:10, col:18> col:14 used i 'int' cinit
|   | |   `-IntegerLiteral 0x120009e08 <col:18> 'int' 0
|   | |-<<<NULL>>>
|   | |-BinaryOperator 0x120009eb0 <col:21, col:25> 'bool' '<'
|   | | |-ImplicitCastExpr 0x120009e80 <col:21> 'int' <LValueToRValue>
|   | | | `-DeclRefExpr 0x120009e40 <col:21> 'int' lvalue Var 0x120009da0 'i' 'int'
|   | | `-ImplicitCastExpr 0x120009e98 <col:25> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x120009e60 <col:25> 'int' lvalue ParmVar 0x120009a08 'val2' 'int'
|   | |-UnaryOperator 0x120009ef0 <col:31, col:32> 'int' postfix '++'
|   | | `-DeclRefExpr 0x120009ed0 <col:31> 'int' lvalue Var 0x120009da0 'i' 'int'
|   | `-CompoundStmt 0x12000a098 <line:7:5, line:9:5>
|   |   `-BinaryOperator 0x12000a078 <line:8:9, col:39> 'int':'int' lvalue '='
|   |     |-DeclRefExpr 0x120009f08 <col:9> 'int':'int' lvalue Var 0x120009bd0 'result' 'int':'int'
|   |     `-CallExpr 0x12000a018 <col:18, col:39> 'int'
|   |       |-ImplicitCastExpr 0x12000a000 <col:18, col:23> 'int (*)(int, int)' <FunctionToPointerDecay>
|   |       | `-DeclRefExpr 0x120009f60 <col:18, col:23> 'int (int, int)' lvalue Function 0x1200098b8 'add' 'int (int, int)'
|   |       |-ImplicitCastExpr 0x12000a048 <col:27> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x120009f90 <col:27> 'int' lvalue ParmVar 0x120009988 'val1' 'int'
|   |       `-ImplicitCastExpr 0x12000a060 <col:33> 'int':'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x120009fb0 <col:33> 'int':'int' lvalue Var 0x120009bd0 'result' 'int':'int'
|   `-ReturnStmt 0x12000a120 <line:10:5, col:12>
|     `-ImplicitCastExpr 0x12000a108 <col:12> 'int':'int' <LValueToRValue>
|       `-DeclRefExpr 0x12000a0e8 <col:12> 'int':'int' lvalue Var 0x120009bd0 'result' 'int':'int'
`-NamespaceDecl 0x12000a158 prev 0x128105708 <line:13:1, line:21:1> line:13:11 foo
  |-original Namespace 0x128105708 'foo'
  `-FunctionDecl 0x12000a300 prev 0x1200098b8 <line:16:1, line:19:1> line:16:5 used add 'int (int, int)'
    |-ParmVarDecl 0x12000a1e0 <col:9, col:13> col:13 used val1 'int'
    |-ParmVarDecl 0x12000a260 <col:19, col:23> col:23 used val2 'int'
    `-CompoundStmt 0x12000a458 <line:17:1, line:19:1>
      `-ReturnStmt 0x12000a448 <line:18:5, col:19>
        `-BinaryOperator 0x12000a428 <col:12, col:19> 'int' '+'
          |-ImplicitCastExpr 0x12000a3f8 <col:12> 'int' <LValueToRValue>
          | `-DeclRefExpr 0x12000a3b8 <col:12> 'int' lvalue ParmVar 0x12000a1e0 'val1' 'int'
          `-ImplicitCastExpr 0x12000a410 <col:19> 'int' <LValueToRValue>
            `-DeclRefExpr 0x12000a3d8 <col:19> 'int' lvalue ParmVar 0x12000a260 'val2' 'int'
