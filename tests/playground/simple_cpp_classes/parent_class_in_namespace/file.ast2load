TranslationUnitDecl 0x123848808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1238496f0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x123848dd0 '__int128'
|-TypedefDecl 0x123849760 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x123848df0 'unsigned __int128'
|-TypedefDecl 0x12400d120 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x12400ce90 '__NSConstantString_tag'
|   `-CXXRecord 0x12400ce00 '__NSConstantString_tag'
|-TypedefDecl 0x12400d188 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x123848fd0 '__SVInt8_t'
|-TypedefDecl 0x12400d1f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x123848ff0 '__SVInt16_t'
|-TypedefDecl 0x12400d258 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x123849010 '__SVInt32_t'
|-TypedefDecl 0x12400d2c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x123849030 '__SVInt64_t'
|-TypedefDecl 0x12400d328 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x123849050 '__SVUint8_t'
|-TypedefDecl 0x12400d390 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x123849070 '__SVUint16_t'
|-TypedefDecl 0x12400d3f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x123849090 '__SVUint32_t'
|-TypedefDecl 0x12400d460 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x1238490b0 '__SVUint64_t'
|-TypedefDecl 0x12400d4c8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x1238490d0 '__SVFloat16_t'
|-TypedefDecl 0x12400d530 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x1238490f0 '__SVFloat32_t'
|-TypedefDecl 0x12400d598 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x123849110 '__SVFloat64_t'
|-TypedefDecl 0x12400d600 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x123849130 '__SVBFloat16_t'
|-TypedefDecl 0x12400d668 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x123849150 '__clang_svint8x2_t'
|-TypedefDecl 0x12400d6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x123849170 '__clang_svint16x2_t'
|-TypedefDecl 0x12400d738 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x123849190 '__clang_svint32x2_t'
|-TypedefDecl 0x12400d7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x1238491b0 '__clang_svint64x2_t'
|-TypedefDecl 0x12400d808 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x1238491d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x12400d870 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x1238491f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x12400d8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x123849210 '__clang_svuint32x2_t'
|-TypedefDecl 0x12400d940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x123849230 '__clang_svuint64x2_t'
|-TypedefDecl 0x12400d9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x123849250 '__clang_svfloat16x2_t'
|-TypedefDecl 0x12400da10 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x123849270 '__clang_svfloat32x2_t'
|-TypedefDecl 0x12400da78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x123849290 '__clang_svfloat64x2_t'
|-TypedefDecl 0x12400dae0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x1238492b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x12400db48 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x1238492d0 '__clang_svint8x3_t'
|-TypedefDecl 0x12400dbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x1238492f0 '__clang_svint16x3_t'
|-TypedefDecl 0x12400dc18 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x123849310 '__clang_svint32x3_t'
|-TypedefDecl 0x12400dc80 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x123849330 '__clang_svint64x3_t'
|-TypedefDecl 0x12400dce8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x123849350 '__clang_svuint8x3_t'
|-TypedefDecl 0x12400dd50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x123849370 '__clang_svuint16x3_t'
|-TypedefDecl 0x124010600 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x123849390 '__clang_svuint32x3_t'
|-TypedefDecl 0x124010668 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x1238493b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x1240106d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x1238493d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x124010738 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x1238493f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x1240107a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x123849410 '__clang_svfloat64x3_t'
|-TypedefDecl 0x124010808 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x123849430 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x124010870 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x123849450 '__clang_svint8x4_t'
|-TypedefDecl 0x1240108d8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x123849470 '__clang_svint16x4_t'
|-TypedefDecl 0x124010940 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x123849490 '__clang_svint32x4_t'
|-TypedefDecl 0x1240109a8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x1238494b0 '__clang_svint64x4_t'
|-TypedefDecl 0x124010a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x1238494d0 '__clang_svuint8x4_t'
|-TypedefDecl 0x124010a78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x1238494f0 '__clang_svuint16x4_t'
|-TypedefDecl 0x124010ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x123849510 '__clang_svuint32x4_t'
|-TypedefDecl 0x124010b48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x123849530 '__clang_svuint64x4_t'
|-TypedefDecl 0x124010bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x123849550 '__clang_svfloat16x4_t'
|-TypedefDecl 0x124010c18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x123849570 '__clang_svfloat32x4_t'
|-TypedefDecl 0x124010c80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x123849590 '__clang_svfloat64x4_t'
|-TypedefDecl 0x124010ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x1238495b0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x124010d50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x1238495d0 '__SVBool_t'
|-TypedefDecl 0x124010db8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x1238495f0 '__clang_svboolx2_t'
|-TypedefDecl 0x124010e20 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x123849610 '__clang_svboolx4_t'
|-TypedefDecl 0x124010e88 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x123849630 '__SVCount_t'
|-TypedefDecl 0x124010f28 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x124010ee0 'char *'
|   `-BuiltinType 0x1238488b0 'char'
|-TypedefDecl 0x124010f98 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x124010ee0 'char *'
|   `-BuiltinType 0x1238488b0 'char'
|-NamespaceDecl 0x124010ff0 <./tests/playground/simple_cpp_classes/parent_class_in_namespace/file.cpp:1:1, line:11:1> line:1:11 TestNamespace
| `-CXXRecordDecl 0x124011060 <line:3:1, line:10:1> line:3:7 referenced class TestBaseClass definition
|   |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
|   | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
|   | |-MoveConstructor exists simple non_trivial
|   | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
|   | |-MoveAssignment exists simple non_trivial
|   | `-Destructor simple irrelevant trivial constexpr
|   |-CXXRecordDecl 0x124011178 <col:1, col:7> col:7 implicit class TestBaseClass
|   |-AccessSpecDecl 0x124011208 <line:5:3, col:9> col:3 public
|   |-CXXMethodDecl 0x1240113d0 <line:6:5, line:9:5> line:6:17 used add 'int (int, int)' virtual implicit-inline
|   | |-ParmVarDecl 0x124011248 <col:21, col:25> col:25 used val1 'int'
|   | |-ParmVarDecl 0x1240112c8 <col:31, col:35> col:35 used val2 'int'
|   | `-CompoundStmt 0x124030420 <line:7:5, line:9:5>
|   |   `-ReturnStmt 0x124030410 <line:8:9, col:23>
|   |     `-BinaryOperator 0x1240303f0 <col:16, col:23> 'int' '+'
|   |       |-ImplicitCastExpr 0x1240303c0 <col:16> 'int' <LValueToRValue>
|   |       | `-DeclRefExpr 0x124030380 <col:16> 'int' lvalue ParmVar 0x124011248 'val1' 'int'
|   |       `-ImplicitCastExpr 0x1240303d8 <col:23> 'int' <LValueToRValue>
|   |         `-DeclRefExpr 0x1240303a0 <col:23> 'int' lvalue ParmVar 0x1240112c8 'val2' 'int'
|   |-CXXMethodDecl 0x124011500 <line:3:7> col:7 implicit constexpr operator= 'TestNamespace::TestBaseClass &(const TestNamespace::TestBaseClass &)' inline default noexcept-unevaluated 0x124011500
|   | `-ParmVarDecl 0x124030038 <col:7> col:7 'const TestNamespace::TestBaseClass &'
|   |-CXXMethodDecl 0x1240300d8 <col:7> col:7 implicit constexpr operator= 'TestNamespace::TestBaseClass &(TestNamespace::TestBaseClass &&)' inline default noexcept-unevaluated 0x1240300d8
|   | `-ParmVarDecl 0x1240301e8 <col:7> col:7 'TestNamespace::TestBaseClass &&'
|   |-CXXDestructorDecl 0x124030268 <col:7> col:7 implicit constexpr ~TestBaseClass 'void ()' inline default trivial noexcept-unevaluated 0x124030268
|   |-CXXConstructorDecl 0x124034db8 <col:7> col:7 implicit used constexpr TestBaseClass 'void () noexcept' inline default
|   | `-CompoundStmt 0x124035670 <col:7>
|   |-CXXConstructorDecl 0x124034ea0 <col:7> col:7 implicit constexpr TestBaseClass 'void (const TestNamespace::TestBaseClass &)' inline default noexcept-unevaluated 0x124034ea0
|   | `-ParmVarDecl 0x124034fb8 <col:7> col:7 'const TestNamespace::TestBaseClass &'
|   `-CXXConstructorDecl 0x124035038 <col:7> col:7 implicit constexpr TestBaseClass 'void (TestNamespace::TestBaseClass &&)' inline default noexcept-unevaluated 0x124035038
|     `-ParmVarDecl 0x124035158 <col:7> col:7 'TestNamespace::TestBaseClass &&'
|-UsingDirectiveDecl 0x124030438 <line:13:1, col:17> col:17 Namespace 0x124010ff0 'TestNamespace'
|-CXXRecordDecl 0x124030490 <line:15:1, line:22:1> line:15:7 referenced class TestClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-public 'TestBaseClass':'TestNamespace::TestBaseClass'
| |-CXXRecordDecl 0x124030620 <col:1, col:7> col:7 implicit class TestClass
| |-AccessSpecDecl 0x1240306b0 <line:17:3, col:9> col:3 public
| |-CXXMethodDecl 0x124030848 <line:18:5, line:21:5> line:18:9 used add 'int (int, int)' implicit-inline
| | |-Overrides: [ 0x1240113d0 TestBaseClass::add 'int (int, int)' ]
| | |-ParmVarDecl 0x1240306f0 <col:13, col:17> col:17 used val1 'int'
| | |-ParmVarDecl 0x124030770 <col:23, col:27> col:27 used val2 'int'
| | |-CompoundStmt 0x124034880 <line:19:5, line:21:5>
| | | `-ReturnStmt 0x124034870 <line:20:9, col:45>
| | |   `-CXXMemberCallExpr 0x124030ee8 <col:16, col:45> 'int'
| | |     |-MemberExpr 0x124030e60 <col:16, col:31> '<bound member function type>' ->add 0x1240113d0
| | |     | `-ImplicitCastExpr 0x124030f18 <col:31> 'TestNamespace::TestBaseClass *' <UncheckedDerivedToBase (TestBaseClass)>
| | |     |   `-CXXThisExpr 0x124030e50 <col:31> 'TestClass *' implicit this
| | |     |-ImplicitCastExpr 0x124030f38 <col:35> 'int' <LValueToRValue>
| | |     | `-DeclRefExpr 0x124030ea8 <col:35> 'int' lvalue ParmVar 0x1240306f0 'val1' 'int'
| | |     `-ImplicitCastExpr 0x124030f50 <col:41> 'int' <LValueToRValue>
| | |       `-DeclRefExpr 0x124030ec8 <col:41> 'int' lvalue ParmVar 0x124030770 'val2' 'int'
| | `-OverrideAttr 0x124030900 <line:18:33>
| |-CXXMethodDecl 0x1240309d0 <line:15:7> col:7 implicit constexpr operator= 'TestClass &(const TestClass &)' inline default noexcept-unevaluated 0x1240309d0
| | `-ParmVarDecl 0x124030ae8 <col:7> col:7 'const TestClass &'
| |-CXXMethodDecl 0x124030b88 <col:7> col:7 implicit constexpr operator= 'TestClass &(TestClass &&)' inline default noexcept-unevaluated 0x124030b88
| | `-ParmVarDecl 0x124030c98 <col:7> col:7 'TestClass &&'
| |-CXXDestructorDecl 0x124030d18 <col:7> col:7 implicit constexpr ~TestClass 'void ()' inline default trivial noexcept-unevaluated 0x124030d18
| |-CXXConstructorDecl 0x124034cc0 <col:7> col:7 implicit used constexpr TestClass 'void () noexcept' inline default
| | |-CXXCtorInitializer 'TestBaseClass':'TestNamespace::TestBaseClass'
| | | `-CXXConstructExpr 0x124035680 <col:7> 'TestBaseClass':'TestNamespace::TestBaseClass' 'void () noexcept'
| | `-CompoundStmt 0x1240356e0 <col:7>
| |-CXXConstructorDecl 0x1240351d8 <col:7> col:7 implicit constexpr TestClass 'void (const TestClass &)' inline default noexcept-unevaluated 0x1240351d8
| | `-ParmVarDecl 0x1240352f8 <col:7> col:7 'const TestClass &'
| `-CXXConstructorDecl 0x124035378 <col:7> col:7 implicit constexpr TestClass 'void (TestClass &&)' inline default noexcept-unevaluated 0x124035378
|   `-ParmVarDecl 0x124035498 <col:7> col:7 'TestClass &&'
`-FunctionDecl 0x124034b00 <line:24:1, line:28:1> line:24:5 main 'int (int, char **)'
  |-ParmVarDecl 0x1240348b0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x1240349e0 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x124037400 <line:25:1, line:28:1>
    |-DeclStmt 0x124035718 <line:26:5, col:24>
    | `-VarDecl 0x124034c40 <col:5, col:15> col:15 used testClass 'TestClass':'TestClass' callinit
    |   `-CXXConstructExpr 0x1240356f0 <col:15> 'TestClass':'TestClass' 'void () noexcept'
    `-ReturnStmt 0x1240357f0 <line:27:5, col:30>
      `-CXXMemberCallExpr 0x1240357c0 <col:12, col:30> 'int'
        |-MemberExpr 0x124035750 <col:12, col:22> '<bound member function type>' .add 0x124030848
        | `-DeclRefExpr 0x124035730 <col:12> 'TestClass':'TestClass' lvalue Var 0x124034c40 'testClass' 'TestClass':'TestClass'
        |-IntegerLiteral 0x124035780 <col:26> 'int' 1
        `-IntegerLiteral 0x1240357a0 <col:29> 'int' 2
