TranslationUnitDecl 0x15a048e08 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x15a049cf0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x15a0493d0 '__int128'
|-TypedefDecl 0x15a049d60 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x15a0493f0 'unsigned __int128'
|-TypedefDecl 0x15a032720 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x15a032490 '__NSConstantString_tag'
|   `-CXXRecord 0x15a032400 '__NSConstantString_tag'
|-TypedefDecl 0x15a032788 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x15a0495d0 '__SVInt8_t'
|-TypedefDecl 0x15a0327f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x15a0495f0 '__SVInt16_t'
|-TypedefDecl 0x15a032858 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x15a049610 '__SVInt32_t'
|-TypedefDecl 0x15a0328c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x15a049630 '__SVInt64_t'
|-TypedefDecl 0x15a032928 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x15a049650 '__SVUint8_t'
|-TypedefDecl 0x15a032990 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x15a049670 '__SVUint16_t'
|-TypedefDecl 0x15a0329f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x15a049690 '__SVUint32_t'
|-TypedefDecl 0x15a032a60 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x15a0496b0 '__SVUint64_t'
|-TypedefDecl 0x15a032ac8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x15a0496d0 '__SVFloat16_t'
|-TypedefDecl 0x15a032b30 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x15a0496f0 '__SVFloat32_t'
|-TypedefDecl 0x15a032b98 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x15a049710 '__SVFloat64_t'
|-TypedefDecl 0x15a032c00 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x15a049730 '__SVBFloat16_t'
|-TypedefDecl 0x15a032c68 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x15a049750 '__clang_svint8x2_t'
|-TypedefDecl 0x15a032cd0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x15a049770 '__clang_svint16x2_t'
|-TypedefDecl 0x15a032d38 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x15a049790 '__clang_svint32x2_t'
|-TypedefDecl 0x15a032da0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x15a0497b0 '__clang_svint64x2_t'
|-TypedefDecl 0x15a032e08 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x15a0497d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x15a032e70 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x15a0497f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x15a032ed8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x15a049810 '__clang_svuint32x2_t'
|-TypedefDecl 0x15a032f40 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x15a049830 '__clang_svuint64x2_t'
|-TypedefDecl 0x15a032fa8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x15a049850 '__clang_svfloat16x2_t'
|-TypedefDecl 0x15a033010 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x15a049870 '__clang_svfloat32x2_t'
|-TypedefDecl 0x15a033078 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x15a049890 '__clang_svfloat64x2_t'
|-TypedefDecl 0x15a0330e0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x15a0498b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x15a033148 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x15a0498d0 '__clang_svint8x3_t'
|-TypedefDecl 0x15a0331b0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x15a0498f0 '__clang_svint16x3_t'
|-TypedefDecl 0x15a033218 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x15a049910 '__clang_svint32x3_t'
|-TypedefDecl 0x15a033280 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x15a049930 '__clang_svint64x3_t'
|-TypedefDecl 0x15a0332e8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x15a049950 '__clang_svuint8x3_t'
|-TypedefDecl 0x15a033350 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x15a049970 '__clang_svuint16x3_t'
|-TypedefDecl 0x15a104800 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x15a049990 '__clang_svuint32x3_t'
|-TypedefDecl 0x15a104868 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x15a0499b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x15a1048d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x15a0499d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x15a104938 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x15a0499f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x15a1049a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x15a049a10 '__clang_svfloat64x3_t'
|-TypedefDecl 0x15a104a08 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x15a049a30 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x15a104a70 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x15a049a50 '__clang_svint8x4_t'
|-TypedefDecl 0x15a104ad8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x15a049a70 '__clang_svint16x4_t'
|-TypedefDecl 0x15a104b40 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x15a049a90 '__clang_svint32x4_t'
|-TypedefDecl 0x15a104ba8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x15a049ab0 '__clang_svint64x4_t'
|-TypedefDecl 0x15a104c10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x15a049ad0 '__clang_svuint8x4_t'
|-TypedefDecl 0x15a104c78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x15a049af0 '__clang_svuint16x4_t'
|-TypedefDecl 0x15a104ce0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x15a049b10 '__clang_svuint32x4_t'
|-TypedefDecl 0x15a104d48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x15a049b30 '__clang_svuint64x4_t'
|-TypedefDecl 0x15a104db0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x15a049b50 '__clang_svfloat16x4_t'
|-TypedefDecl 0x15a104e18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x15a049b70 '__clang_svfloat32x4_t'
|-TypedefDecl 0x15a104e80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x15a049b90 '__clang_svfloat64x4_t'
|-TypedefDecl 0x15a104ee8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x15a049bb0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x15a104f50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x15a049bd0 '__SVBool_t'
|-TypedefDecl 0x15a104fb8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x15a049bf0 '__clang_svboolx2_t'
|-TypedefDecl 0x15a105020 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x15a049c10 '__clang_svboolx4_t'
|-TypedefDecl 0x15a105088 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x15a049c30 '__SVCount_t'
|-TypedefDecl 0x15a105128 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x15a1050e0 'char *'
|   `-BuiltinType 0x15a048eb0 'char'
|-TypedefDecl 0x15a105198 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x15a1050e0 'char *'
|   `-BuiltinType 0x15a048eb0 'char'
|-ClassTemplateDecl 0x15a105340 <./tests/playground/simple_templates/simple_template_class_virtual_func/file.cpp:1:1, line:8:1> line:1:26 TemplateClass
| |-TemplateTypeParmDecl 0x15a1051f0 <col:11, col:17> col:17 referenced class depth 0 index 0 T
| |-CXXRecordDecl 0x15a1052b0 <col:20, line:8:1> line:1:26 class TemplateClass definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial constexpr needs_implicit
| | |-CXXRecordDecl 0x15a105580 <col:20, col:26> col:26 implicit class TemplateClass
| | |-AccessSpecDecl 0x15a105610 <line:3:3, col:9> col:3 public
| | `-CXXMethodDecl 0x15a123a00 <line:4:5, line:7:5> line:4:16 foo 'int (T &)' static implicit-inline
| |   |-ParmVarDecl 0x15a1056a8 <col:20, col:23> col:23 referenced t 'T &'
| |   `-CompoundStmt 0x15a123b60 <line:5:5, line:7:5>
| |     `-ReturnStmt 0x15a123b50 <line:6:9, col:21>
| |       `-CallExpr 0x15a123b30 <col:16, col:21> '<dependent type>'
| |         `-CXXDependentScopeMemberExpr 0x15a123ae8 <col:16, col:18> '<dependent type>' lvalue .ba
| |           `-DeclRefExpr 0x15a123ac8 <col:16> 'T' lvalue ParmVar 0x15a1056a8 't' 'T &'
| `-ClassTemplateSpecializationDecl 0x15a809798 <line:1:1, line:8:1> line:1:26 class TemplateClass definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor exists simple trivial needs_implicit
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial constexpr needs_implicit
|   |-TemplateArgument type 'SimpleClass'
|   | `-RecordType 0x15a123c10 'SimpleClass'
|   |   `-CXXRecord 0x15a123b78 'SimpleClass'
|   |-CXXRecordDecl 0x15a809978 <col:20, col:26> col:26 implicit class TemplateClass
|   |-AccessSpecDecl 0x15a809a08 <line:3:3, col:9> col:3 public
|   `-CXXMethodDecl 0x15a809b90 <line:4:5, line:7:5> line:4:16 used foo 'int (SimpleClass &)' static implicit-inline
|     |-ParmVarDecl 0x15a809a98 <col:20, col:23> col:23 used t 'SimpleClass &'
|     `-CompoundStmt 0x15a809e70 <line:5:5, line:7:5>
|       `-ReturnStmt 0x15a809e60 <line:6:9, col:21>
|         `-CXXMemberCallExpr 0x15a809e10 <col:16, col:21> 'int'
|           `-MemberExpr 0x15a809de0 <col:16, col:18> '<bound member function type>' .ba 0x15a123dd0
|             `-DeclRefExpr 0x15a809dc0 <col:16> 'SimpleClass':'SimpleClass' lvalue ParmVar 0x15a809a98 't' 'SimpleClass &'
|-CXXRecordDecl 0x15a123b78 <line:10:1, line:17:1> line:10:7 referenced class SimpleClass definition
| |-DefinitionData polymorphic literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple non_trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple non_trivial
| | |-CopyAssignment simple non_trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple non_trivial
| | `-Destructor simple irrelevant trivial constexpr
| |-CXXRecordDecl 0x15a123c98 <col:1, col:7> col:7 implicit class SimpleClass
| |-AccessSpecDecl 0x15a123d28 <line:12:3, col:9> col:3 public
| |-CXXMethodDecl 0x15a123dd0 <line:13:5, line:16:5> line:13:17 used ba 'int ()' virtual implicit-inline
| | `-CompoundStmt 0x15a124380 <line:14:5, line:16:5>
| |   `-ReturnStmt 0x15a124370 <line:15:9, col:16>
| |     `-IntegerLiteral 0x15a124350 <col:16> 'int' 5
| |-CXXMethodDecl 0x15a123ef0 <line:10:7> col:7 implicit constexpr operator= 'SimpleClass &(const SimpleClass &)' inline default noexcept-unevaluated 0x15a123ef0
| | `-ParmVarDecl 0x15a124008 <col:7> col:7 'const SimpleClass &'
| |-CXXMethodDecl 0x15a1240a8 <col:7> col:7 implicit constexpr operator= 'SimpleClass &(SimpleClass &&)' inline default noexcept-unevaluated 0x15a1240a8
| | `-ParmVarDecl 0x15a1241b8 <col:7> col:7 'SimpleClass &&'
| |-CXXDestructorDecl 0x15a124238 <col:7> col:7 implicit constexpr ~SimpleClass 'void ()' inline default trivial noexcept-unevaluated 0x15a124238
| |-CXXConstructorDecl 0x15a1247c0 <col:7> col:7 implicit used constexpr SimpleClass 'void () noexcept' inline default
| | `-CompoundStmt 0x15a809738 <col:7>
| |-CXXConstructorDecl 0x15a1248a0 <col:7> col:7 implicit constexpr SimpleClass 'void (const SimpleClass &)' inline default noexcept-unevaluated 0x15a1248a0
| | `-ParmVarDecl 0x15a809400 <col:7> col:7 'const SimpleClass &'
| `-CXXConstructorDecl 0x15a809480 <col:7> col:7 implicit constexpr SimpleClass 'void (SimpleClass &&)' inline default noexcept-unevaluated 0x15a809480
|   `-ParmVarDecl 0x15a809598 <col:7> col:7 'SimpleClass &&'
`-FunctionDecl 0x15a124600 <line:19:1, line:23:1> line:19:5 main 'int (int, char **)'
  |-ParmVarDecl 0x15a1243b0 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x15a1244e0 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x15a809da0 <line:20:1, line:23:1>
    |-DeclStmt 0x15a809770 <line:21:5, col:25>
    | `-VarDecl 0x15a124740 <col:5, col:17> col:17 used instance 'SimpleClass':'SimpleClass' callinit
    |   `-CXXConstructExpr 0x15a809748 <col:17> 'SimpleClass':'SimpleClass' 'void () noexcept'
    `-ReturnStmt 0x15a809d90 <line:22:5, col:52>
      `-CallExpr 0x15a809d68 <col:12, col:52> 'int'
        |-ImplicitCastExpr 0x15a809d50 <col:12, col:40> 'int (*)(SimpleClass &)' <FunctionToPointerDecay>
        | `-DeclRefExpr 0x15a809c98 <col:12, col:40> 'int (SimpleClass &)' lvalue CXXMethod 0x15a809b90 'foo' 'int (SimpleClass &)'
        `-DeclRefExpr 0x15a809cc8 <col:44> 'SimpleClass':'SimpleClass' lvalue Var 0x15a124740 'instance' 'SimpleClass':'SimpleClass'
