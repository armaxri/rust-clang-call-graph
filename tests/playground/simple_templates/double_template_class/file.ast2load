TranslationUnitDecl 0x13c048808 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x13c0496f0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x13c048dd0 '__int128'
|-TypedefDecl 0x13c049760 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x13c048df0 'unsigned __int128'
|-TypedefDecl 0x13c80d120 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x13c80ce90 '__NSConstantString_tag'
|   `-CXXRecord 0x13c80ce00 '__NSConstantString_tag'
|-TypedefDecl 0x13c80d188 <<invalid sloc>> <invalid sloc> implicit __SVInt8_t '__SVInt8_t'
| `-BuiltinType 0x13c048fd0 '__SVInt8_t'
|-TypedefDecl 0x13c80d1f0 <<invalid sloc>> <invalid sloc> implicit __SVInt16_t '__SVInt16_t'
| `-BuiltinType 0x13c048ff0 '__SVInt16_t'
|-TypedefDecl 0x13c80d258 <<invalid sloc>> <invalid sloc> implicit __SVInt32_t '__SVInt32_t'
| `-BuiltinType 0x13c049010 '__SVInt32_t'
|-TypedefDecl 0x13c80d2c0 <<invalid sloc>> <invalid sloc> implicit __SVInt64_t '__SVInt64_t'
| `-BuiltinType 0x13c049030 '__SVInt64_t'
|-TypedefDecl 0x13c80d328 <<invalid sloc>> <invalid sloc> implicit __SVUint8_t '__SVUint8_t'
| `-BuiltinType 0x13c049050 '__SVUint8_t'
|-TypedefDecl 0x13c80d390 <<invalid sloc>> <invalid sloc> implicit __SVUint16_t '__SVUint16_t'
| `-BuiltinType 0x13c049070 '__SVUint16_t'
|-TypedefDecl 0x13c80d3f8 <<invalid sloc>> <invalid sloc> implicit __SVUint32_t '__SVUint32_t'
| `-BuiltinType 0x13c049090 '__SVUint32_t'
|-TypedefDecl 0x13c80d460 <<invalid sloc>> <invalid sloc> implicit __SVUint64_t '__SVUint64_t'
| `-BuiltinType 0x13c0490b0 '__SVUint64_t'
|-TypedefDecl 0x13c80d4c8 <<invalid sloc>> <invalid sloc> implicit __SVFloat16_t '__SVFloat16_t'
| `-BuiltinType 0x13c0490d0 '__SVFloat16_t'
|-TypedefDecl 0x13c80d530 <<invalid sloc>> <invalid sloc> implicit __SVFloat32_t '__SVFloat32_t'
| `-BuiltinType 0x13c0490f0 '__SVFloat32_t'
|-TypedefDecl 0x13c80d598 <<invalid sloc>> <invalid sloc> implicit __SVFloat64_t '__SVFloat64_t'
| `-BuiltinType 0x13c049110 '__SVFloat64_t'
|-TypedefDecl 0x13c80d600 <<invalid sloc>> <invalid sloc> implicit __SVBFloat16_t '__SVBFloat16_t'
| `-BuiltinType 0x13c049130 '__SVBFloat16_t'
|-TypedefDecl 0x13c80d668 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x2_t '__clang_svint8x2_t'
| `-BuiltinType 0x13c049150 '__clang_svint8x2_t'
|-TypedefDecl 0x13c80d6d0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x2_t '__clang_svint16x2_t'
| `-BuiltinType 0x13c049170 '__clang_svint16x2_t'
|-TypedefDecl 0x13c80d738 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x2_t '__clang_svint32x2_t'
| `-BuiltinType 0x13c049190 '__clang_svint32x2_t'
|-TypedefDecl 0x13c80d7a0 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x2_t '__clang_svint64x2_t'
| `-BuiltinType 0x13c0491b0 '__clang_svint64x2_t'
|-TypedefDecl 0x13c80d808 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x2_t '__clang_svuint8x2_t'
| `-BuiltinType 0x13c0491d0 '__clang_svuint8x2_t'
|-TypedefDecl 0x13c80d870 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x2_t '__clang_svuint16x2_t'
| `-BuiltinType 0x13c0491f0 '__clang_svuint16x2_t'
|-TypedefDecl 0x13c80d8d8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x2_t '__clang_svuint32x2_t'
| `-BuiltinType 0x13c049210 '__clang_svuint32x2_t'
|-TypedefDecl 0x13c80d940 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x2_t '__clang_svuint64x2_t'
| `-BuiltinType 0x13c049230 '__clang_svuint64x2_t'
|-TypedefDecl 0x13c80d9a8 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x2_t '__clang_svfloat16x2_t'
| `-BuiltinType 0x13c049250 '__clang_svfloat16x2_t'
|-TypedefDecl 0x13c80da10 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x2_t '__clang_svfloat32x2_t'
| `-BuiltinType 0x13c049270 '__clang_svfloat32x2_t'
|-TypedefDecl 0x13c80da78 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x2_t '__clang_svfloat64x2_t'
| `-BuiltinType 0x13c049290 '__clang_svfloat64x2_t'
|-TypedefDecl 0x13c80dae0 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x2_t '__clang_svbfloat16x2_t'
| `-BuiltinType 0x13c0492b0 '__clang_svbfloat16x2_t'
|-TypedefDecl 0x13c80db48 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x3_t '__clang_svint8x3_t'
| `-BuiltinType 0x13c0492d0 '__clang_svint8x3_t'
|-TypedefDecl 0x13c80dbb0 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x3_t '__clang_svint16x3_t'
| `-BuiltinType 0x13c0492f0 '__clang_svint16x3_t'
|-TypedefDecl 0x13c80dc18 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x3_t '__clang_svint32x3_t'
| `-BuiltinType 0x13c049310 '__clang_svint32x3_t'
|-TypedefDecl 0x13c80dc80 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x3_t '__clang_svint64x3_t'
| `-BuiltinType 0x13c049330 '__clang_svint64x3_t'
|-TypedefDecl 0x13c80dce8 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x3_t '__clang_svuint8x3_t'
| `-BuiltinType 0x13c049350 '__clang_svuint8x3_t'
|-TypedefDecl 0x13c80dd50 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x3_t '__clang_svuint16x3_t'
| `-BuiltinType 0x13c049370 '__clang_svuint16x3_t'
|-TypedefDecl 0x13c810600 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x3_t '__clang_svuint32x3_t'
| `-BuiltinType 0x13c049390 '__clang_svuint32x3_t'
|-TypedefDecl 0x13c810668 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x3_t '__clang_svuint64x3_t'
| `-BuiltinType 0x13c0493b0 '__clang_svuint64x3_t'
|-TypedefDecl 0x13c8106d0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x3_t '__clang_svfloat16x3_t'
| `-BuiltinType 0x13c0493d0 '__clang_svfloat16x3_t'
|-TypedefDecl 0x13c810738 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x3_t '__clang_svfloat32x3_t'
| `-BuiltinType 0x13c0493f0 '__clang_svfloat32x3_t'
|-TypedefDecl 0x13c8107a0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x3_t '__clang_svfloat64x3_t'
| `-BuiltinType 0x13c049410 '__clang_svfloat64x3_t'
|-TypedefDecl 0x13c810808 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x3_t '__clang_svbfloat16x3_t'
| `-BuiltinType 0x13c049430 '__clang_svbfloat16x3_t'
|-TypedefDecl 0x13c810870 <<invalid sloc>> <invalid sloc> implicit __clang_svint8x4_t '__clang_svint8x4_t'
| `-BuiltinType 0x13c049450 '__clang_svint8x4_t'
|-TypedefDecl 0x13c8108d8 <<invalid sloc>> <invalid sloc> implicit __clang_svint16x4_t '__clang_svint16x4_t'
| `-BuiltinType 0x13c049470 '__clang_svint16x4_t'
|-TypedefDecl 0x13c810940 <<invalid sloc>> <invalid sloc> implicit __clang_svint32x4_t '__clang_svint32x4_t'
| `-BuiltinType 0x13c049490 '__clang_svint32x4_t'
|-TypedefDecl 0x13c8109a8 <<invalid sloc>> <invalid sloc> implicit __clang_svint64x4_t '__clang_svint64x4_t'
| `-BuiltinType 0x13c0494b0 '__clang_svint64x4_t'
|-TypedefDecl 0x13c810a10 <<invalid sloc>> <invalid sloc> implicit __clang_svuint8x4_t '__clang_svuint8x4_t'
| `-BuiltinType 0x13c0494d0 '__clang_svuint8x4_t'
|-TypedefDecl 0x13c810a78 <<invalid sloc>> <invalid sloc> implicit __clang_svuint16x4_t '__clang_svuint16x4_t'
| `-BuiltinType 0x13c0494f0 '__clang_svuint16x4_t'
|-TypedefDecl 0x13c810ae0 <<invalid sloc>> <invalid sloc> implicit __clang_svuint32x4_t '__clang_svuint32x4_t'
| `-BuiltinType 0x13c049510 '__clang_svuint32x4_t'
|-TypedefDecl 0x13c810b48 <<invalid sloc>> <invalid sloc> implicit __clang_svuint64x4_t '__clang_svuint64x4_t'
| `-BuiltinType 0x13c049530 '__clang_svuint64x4_t'
|-TypedefDecl 0x13c810bb0 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat16x4_t '__clang_svfloat16x4_t'
| `-BuiltinType 0x13c049550 '__clang_svfloat16x4_t'
|-TypedefDecl 0x13c810c18 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat32x4_t '__clang_svfloat32x4_t'
| `-BuiltinType 0x13c049570 '__clang_svfloat32x4_t'
|-TypedefDecl 0x13c810c80 <<invalid sloc>> <invalid sloc> implicit __clang_svfloat64x4_t '__clang_svfloat64x4_t'
| `-BuiltinType 0x13c049590 '__clang_svfloat64x4_t'
|-TypedefDecl 0x13c810ce8 <<invalid sloc>> <invalid sloc> implicit __clang_svbfloat16x4_t '__clang_svbfloat16x4_t'
| `-BuiltinType 0x13c0495b0 '__clang_svbfloat16x4_t'
|-TypedefDecl 0x13c810d50 <<invalid sloc>> <invalid sloc> implicit __SVBool_t '__SVBool_t'
| `-BuiltinType 0x13c0495d0 '__SVBool_t'
|-TypedefDecl 0x13c810db8 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx2_t '__clang_svboolx2_t'
| `-BuiltinType 0x13c0495f0 '__clang_svboolx2_t'
|-TypedefDecl 0x13c810e20 <<invalid sloc>> <invalid sloc> implicit __clang_svboolx4_t '__clang_svboolx4_t'
| `-BuiltinType 0x13c049610 '__clang_svboolx4_t'
|-TypedefDecl 0x13c810e88 <<invalid sloc>> <invalid sloc> implicit __SVCount_t '__SVCount_t'
| `-BuiltinType 0x13c049630 '__SVCount_t'
|-TypedefDecl 0x13c810f28 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x13c810ee0 'char *'
|   `-BuiltinType 0x13c0488b0 'char'
|-TypedefDecl 0x13c810f98 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'char *'
| `-PointerType 0x13c810ee0 'char *'
|   `-BuiltinType 0x13c0488b0 'char'
|-ClassTemplateDecl 0x13c8111f8 <./tests/playground/simple_templates/double_template_class/file.cpp:1:1, line:8:1> line:1:35 TemplateClass
| |-TemplateTypeParmDecl 0x13c810ff0 <col:11, col:17> col:17 class depth 0 index 0 T
| |-TemplateTypeParmDecl 0x13c811098 <col:20, col:26> col:26 class depth 0 index 1 K
| |-CXXRecordDecl 0x13c811168 <col:29, line:8:1> line:1:35 class TemplateClass definition
| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial constexpr needs_implicit
| | |-CXXRecordDecl 0x13c811480 <col:29, col:35> col:35 implicit class TemplateClass
| | |-AccessSpecDecl 0x13c811510 <line:3:3, col:9> col:3 public
| | `-CXXMethodDecl 0x13c830800 <line:4:5, line:7:5> line:4:16 foo 'int ()' static implicit-inline
| |   `-CompoundStmt 0x13c830a40 <line:5:5, line:7:5>
| |     `-ReturnStmt 0x13c830a30 <line:6:9, col:32>
| |       `-BinaryOperator 0x13c830a10 <col:16, col:32> '<dependent type>' '+'
| |         |-CallExpr 0x13c830948 <col:16, col:22> '<dependent type>'
| |         | `-DependentScopeDeclRefExpr 0x13c830910 <col:16, col:19> '<dependent type>' lvalue
| |         `-CallExpr 0x13c8309f0 <col:26, col:32> '<dependent type>'
| |           `-DependentScopeDeclRefExpr 0x13c8309b8 <col:26, col:29> '<dependent type>' lvalue
| `-ClassTemplateSpecializationDecl 0x13c8314a0 <line:1:1, line:8:1> line:1:35 class TemplateClass definition
|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   | |-MoveConstructor exists simple trivial
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment exists simple trivial needs_implicit
|   | `-Destructor simple irrelevant trivial constexpr needs_implicit
|   |-TemplateArgument type 'SimpleClassA'
|   | `-RecordType 0x13c830af0 'SimpleClassA'
|   |   `-CXXRecord 0x13c830a58 'SimpleClassA'
|   |-TemplateArgument type 'SimpleClassB'
|   | `-RecordType 0x13c830e20 'SimpleClassB'
|   |   `-CXXRecord 0x13c830d90 'SimpleClassB'
|   |-CXXRecordDecl 0x13c831770 <col:29, col:35> col:35 implicit class TemplateClass
|   |-AccessSpecDecl 0x13c833400 <line:3:3, col:9> col:3 public
|   |-CXXMethodDecl 0x13c833428 <line:4:5, line:7:5> line:4:16 used foo 'int ()' static implicit-inline
|   | `-CompoundStmt 0x13c833e18 <line:5:5, line:7:5>
|   |   `-ReturnStmt 0x13c833e08 <line:6:9, col:32>
|   |     `-BinaryOperator 0x13c833de8 <col:16, col:32> 'int' '+'
|   |       |-CallExpr 0x13c833cf8 <col:16, col:22> 'int'
|   |       | `-ImplicitCastExpr 0x13c833ce0 <col:16, col:19> 'int (*)()' <FunctionToPointerDecay>
|   |       |   `-DeclRefExpr 0x13c833cb0 <col:16, col:19> 'int ()' lvalue CXXMethod 0x13c830c88 'ba' 'int ()'
|   |       `-CallExpr 0x13c833dc8 <col:26, col:32> 'int'
|   |         `-ImplicitCastExpr 0x13c833db0 <col:26, col:29> 'int (*)()' <FunctionToPointerDecay>
|   |           `-DeclRefExpr 0x13c833d80 <col:26, col:29> 'int ()' lvalue CXXMethod 0x13c830fb8 'ba' 'int ()'
|   |-CXXConstructorDecl 0x13c833510 <line:1:35> col:35 implicit used constexpr TemplateClass 'void () noexcept' inline default trivial
|   | `-CompoundStmt 0x13c8339e8 <col:35>
|   |-CXXConstructorDecl 0x13c833648 <col:35> col:35 implicit constexpr TemplateClass 'void (const TemplateClass<SimpleClassA, SimpleClassB> &)' inline default trivial noexcept-unevaluated 0x13c833648
|   | `-ParmVarDecl 0x13c833768 <col:35> col:35 'const TemplateClass<SimpleClassA, SimpleClassB> &'
|   `-CXXConstructorDecl 0x13c833818 <col:35> col:35 implicit constexpr TemplateClass 'void (TemplateClass<SimpleClassA, SimpleClassB> &&)' inline default trivial noexcept-unevaluated 0x13c833818
|     `-ParmVarDecl 0x13c833938 <col:35> col:35 'TemplateClass<SimpleClassA, SimpleClassB> &&'
|-CXXRecordDecl 0x13c830a58 <line:10:1, line:17:1> line:10:7 referenced class SimpleClassA definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial constexpr needs_implicit
| |-CXXRecordDecl 0x13c830b78 <col:1, col:7> col:7 implicit class SimpleClassA
| |-AccessSpecDecl 0x13c830c08 <line:12:3, col:9> col:3 public
| `-CXXMethodDecl 0x13c830c88 <line:13:5, line:16:5> line:13:16 used ba 'int ()' static implicit-inline
|   `-CompoundStmt 0x13c830d78 <line:14:5, line:16:5>
|     `-ReturnStmt 0x13c830d68 <line:15:9, col:16>
|       `-IntegerLiteral 0x13c830d48 <col:16> 'int' 5
|-CXXRecordDecl 0x13c830d90 <line:19:1, line:26:1> line:19:7 referenced class SimpleClassB definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial constexpr needs_implicit
| |-CXXRecordDecl 0x13c830ea8 <col:1, col:7> col:7 implicit class SimpleClassB
| |-AccessSpecDecl 0x13c830f38 <line:21:3, col:9> col:3 public
| `-CXXMethodDecl 0x13c830fb8 <line:22:5, line:25:5> line:22:16 used ba 'int ()' static implicit-inline
|   `-CompoundStmt 0x13c8310a8 <line:23:5, line:25:5>
|     `-ReturnStmt 0x13c831098 <line:24:9, col:16>
|       `-IntegerLiteral 0x13c831078 <col:16> 'int' 5
`-FunctionDecl 0x13c831320 <line:28:1, line:32:1> line:28:5 main 'int (int, char **)'
  |-ParmVarDecl 0x13c8310d8 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x13c831200 <col:20, col:31> col:26 argv 'char **':'char **'
  `-CompoundStmt 0x13c833c28 <line:29:1, line:32:1>
    |-DeclStmt 0x13c833b48 <line:30:5, col:55>
    | `-VarDecl 0x13c8316a0 <col:5, col:47> col:47 used instance 'TemplateClass<SimpleClassA, SimpleClassB>':'TemplateClass<SimpleClassA, SimpleClassB>' callinit
    |   `-CXXConstructExpr 0x13c833b20 <col:47> 'TemplateClass<SimpleClassA, SimpleClassB>':'TemplateClass<SimpleClassA, SimpleClassB>' 'void () noexcept'
    `-ReturnStmt 0x13c833c18 <line:31:5, col:25>
      `-CallExpr 0x13c833bf8 <col:12, col:25> 'int'
        `-ImplicitCastExpr 0x13c833be0 <col:12, col:21> 'int (*)()' <FunctionToPointerDecay>
          `-MemberExpr 0x13c833b80 <col:12, col:21> 'int ()' lvalue .foo 0x13c833428
            `-DeclRefExpr 0x13c833b60 <col:12> 'TemplateClass<SimpleClassA, SimpleClassB>':'TemplateClass<SimpleClassA, SimpleClassB>' lvalue Var 0x13c8316a0 'instance' 'TemplateClass<SimpleClassA, SimpleClassB>':'TemplateClass<SimpleClassA, SimpleClassB>'
